

properties:

  - target:		motto_mysql
  - mysql_ruby_version: '2.7.5'
  - mysql_srcdir:	external/mysql-ruby-$(mysql_ruby_version)
  - mysql_c_in:		$(mysql_srcdir)/mysql.c.in

recipes:

  - product:	:all
    ingreds:	[ Makefile, $(target).h ]
    method*: |
	sys "make"

  - product:	:clean
    method*: |
	rm_rf 'Makefile', '$(target).h', '$(target).o', '$(target).bundle'

  - product:	Makefile
    ingreds:	[ extconf.rb ]
    method*: |
	sys "ruby extconf.rb --with-mysql-dir=/usr/local/mysql"

  - product:	:header
    ingreds:	[ $(target).h ]

  - product:	$(target).h
    ingreds:	[ $(mysql_c_in), Rookbook.yaml ]
    method*: |
	source = File.read('$(mysql_c_in)')
	s = ''
	s << "/* -------------- copied from mysql-ruby-$(mysql_ruby_version)/mysql.c.in -------------- */\n"
	s << "\n"
	s << (source =~ /^\#define MYSQL_RUBY_VERSION.*?\n/ and $&)
	s << "\n"
	s << "/* struct mysql_res */\n"
	s << (source =~ /^struct mysql_res \{.*?^\};\n/m and $&)
	s << "\n"
	s << "/* macro GetMysqlRes */\n"
	s << (source =~ /^\#define GetMysqlRes\(obj\).*?\n/ and $&)
	s << "\n"
	s << "/* struct mysql_stmt */\n"
	s << (source =~ /^struct mysql_stmt \{.*?\};\n/m and $&)
	s << "\n"
	s << "/* macro GetMysqlStmt */\n"
	s << (source =~ /^\#define GetMysqlStmt\(obj\).*?\n/ and $&)
	s << "\n"
	s << "/* check_free() */\n"
	s << (source =~ /^static void check_free\(VALUE \w+\)\n\{.*?^\}\n/m and $&)
	s << "\n"
	s << "/* check_stmt_closed() */\n"
	s << (source =~ /^static void check_stmt_closed\(VALUE \w+\)\n\{.*?^\}\n/m and $&)
	s << "\n"
	s << "/* mysql_stmt_raise() */\n"
	s << (source =~ /^static void mysql_stmt_raise\(MYSQL_STMT\* \w+\)\n\{.*?^\}\n/m and $&)
	s << "\n"
	s << "/* --------------------------------------------------------------------- */\n"
	File.open(@product, 'w') {|f| f.write(s) }



  - product:	:debug
    method*: |
	items = %w[string var_string int24 long longlong float double
	           timestamp datetime date time
		   tiny short year decimal blob tiny_blob medium_blob newdecimal bit]
	s = ''
	s <<   "#if DEBUG\n"
	s <<   "    int _type = buffer_type;\n"
	s <<   "    int _length = s->result.length[i];\n"
	s <<   "    switch (_type) {\n"
	for item in items
	  t = item.upcase
	  s << "    case MYSQL_TYPE_#{t}: fprintf(stderr, \"*** debug: MYSQL_TYPE_#{t}(%d), length=%d\\n\", _type, _length); break;\n"
	end
	s <<   "    default:  fprintf(stderr, \"*** debug: unknown type(%d)\\n\", _type);\n"
	s <<   "    }\n"
	s <<   "#endif\n"
	File.open('debug', 'w') {|f| f << s }

	